[{"Category":"Core Concepts","Word":"Assembly Language","Description":"Low-level programming language with strong correspondence to machine code instructions","Id":"A0000"},{"Category":"Core Concepts","Word":"Machine Code","Description":"Binary code that is directly executed by the CPU","Id":"A0001"},{"Category":"Core Concepts","Word":"Instruction Set Architecture (ISA)","Description":"Specification of machine code instructions for a particular processor","Id":"A0002"},{"Category":"Core Concepts","Word":"Assembler","Description":"Program that converts assembly language into machine code","Id":"A0003"},{"Category":"Core Concepts","Word":"Mnemonic","Description":"Human-readable representation of a machine instruction (e.g., MOV, ADD)","Id":"A0004"},{"Category":"Core Concepts","Word":"Opcode","Description":"Operation code that specifies the instruction to be performed","Id":"A0005"},{"Category":"Core Concepts","Word":"Operand","Description":"Value that an instruction operates on","Id":"A0006"},{"Category":"Core Concepts","Word":"Instruction Pointer / Program Counter","Description":"Register that holds the memory address of the next instruction","Id":"A0007"},{"Category":"Core Concepts","Word":"Syntax","Description":"Rules that define how assembly language statements are instruction","Id":"A0008"},{"Category":"Core Concepts","Word":"Von Neumann Architecture","Description":"Computing design where program and data share the same memory","Id":"A0009"},{"Category":"Core Concepts","Word":"Havard Architecture","Description":"Computing design where program and data are stored in separate memory spaces","Id":"A0010"},{"Category":"Common Assembly Language Variants","Word":"x86 Assembly","Description":"Assembly for Intel/AMD 32-bit processors","Id":"A0011"},{"Category":"Common Assembly Language Variants","Word":"x86-64/AMD64","Description":"Assembly for Intel/AMD 64-bit processors","Id":"A0012"},{"Category":"Common Assembly Language Variants","Word":"ARM Assembly","Description":"Assembly for ARM processors (commonly used in mobile devices)","Id":"A0013"},{"Category":"Common Assembly Language Variants","Word":"MIPS Assembly","Description":"Assembly for MIPS processors (used in embedded systems)","Id":"A0014"},{"Category":"Common Assembly Language Variants","Word":"AVR Assembly","Description":"Assembly for Atmel AVR microcontrollers","Id":"A0015"},{"Category":"Common Assembly Language Variants","Word":"PowerPC Assembly","Description":"Assembly for PowerPC architecture","Id":"A0016"},{"Category":"Common Assembly Language Variants","Word":"RISC-V Assembly","Description":"Assembly for the open RISC-V archtecture","Id":"A0017"},{"Category":"Common Assembly Language Variants","Word":"z/Architecture Assembly","Description":"Assembly for IBM mainframes","Id":"A0018"},{"Category":"Common Assembly Language Variants","Word":"AT&T Syntax","Description":"Assembly syntax commonly used in Unix/Linux environments","Id":"A0019"},{"Category":"Common Assembly Language Variants","Word":"Intel Syntax","Description":"Assembly syntax commonly used in Windows environments","Id":"A0020"},{"Category":"Registers","Word":"Register","Description":"Small, high-speed storage location within the CPU","Id":"A0021"},{"Category":"Registers","Word":"General Purpose Register","Description":"Register that can be used for various operations (e.g., EAX, RAX)","Id":"A0022"},{"Category":"Registers","Word":"Special Purpose Register","Description":"Register with specific functions (e.g., Stack Pointer)","Id":"A0023"},{"Category":"Registers","Word":"Accumulator","Description":"Register that stores results of arthmetic operations","Id":"A0024"},{"Category":"Registers","Word":"Index Register","Description":"Register used for indexed addressing modes","Id":"A0025"},{"Category":"Registers","Word":"Base Regsiter","Description":"Register that contains a base address for memory operations","Id":"A0026"},{"Category":"Registers","Word":"Stack Pointer (SP)","Description":"Register that points to the top of the stack","Id":"A0027"},{"Category":"Registers","Word":"Frame Pointer (FP/BP)","Description":"Register that points to the current stack frame","Id":"A0028"},{"Category":"Registers","Word":"Flags Register","Description":"Register containing status flags that reflect the result of operations","Id":"A0029"},{"Category":"Registers","Word":"Vector Register","Description":"Register used for SIMD (Single Instruction, Multiple Data) operations","Id":"A0030"},{"Category":"Registers","Word":"Control Register","Description":"Register that controls CPU operation (e.g., CRO-CR4 in x86)","Id":"A0031"},{"Category":"Data Types and Data Directives","Word":"Byte","Description":"8-bit data unit","Id":"A0032"},{"Category":"Data Types and Data Directives","Word":"Word","Description":"Architecture-dependent data unit (often 16 bits)","Id":"A0033"},{"Category":"Data Types and Data Directives","Word":"Doubleword","Description":"Typically 32 bits","Id":"A0034"},{"Category":"Data Types and Data Directives","Word":"Quadword","Description":"Typically 64 bits","Id":"A0035"},{"Category":"Data Types and Data Directives","Word":"DB (Define Byte)","Description":"Directive to define byte-sized data","Id":"A0036"},{"Category":"Data Types and Data Directives","Word":"DW (Define Word)","Description":"Directive to define word-sized data","Id":"A0037"},{"Category":"Data Types and Data Directives","Word":"DD (Define Doubleword)","Description":"Directive to define doubleword-sized data","Id":"A0038"},{"Category":"Data Types and Data Directives","Word":"DQ (Define Quadword)","Description":"Directive to define quadword-sized data","Id":"A0039"},{"Category":"Data Types and Data Directives","Word":"RESB (Reserve Bytes)","Description":"Directive to reserve uninitialized bytes","Id":"A0040"},{"Category":"Data Types and Data Directives","Word":"EQU (Equate)","Description":"Directive to define constants","Id":"A0041"},{"Category":"Data Types and Data Directives","Word":"ALIGN","Description":"Directive to align data to memory boundaries","Id":"A0042"},{"Category":"Data Types and Data Directives","Word":"String","Description":"Sequence of characters (often null-terminated)","Id":"A0043"},{"Category":"Memory And Addressing","Word":"Memory Address","Description":"Unique identifier for a memory location","Id":"A0044"},{"Category":"Memory And Addressing","Word":"Addressing Mode","Description":"Method for specifying the operand of an instruction","Id":"A0045"},{"Category":"Memory And Addressing","Word":"Immediate Addressing","Description":"Using a constant value as an operand","Id":"A0046"},{"Category":"Memory And Addressing","Word":"Direct Addressing","Description":"Using a memory address directly as an operand","Id":"A0047"},{"Category":"Memory And Addressing","Word":"Indirect Addressing","Description":"Using a register that contains a memory address","Id":"A0048"},{"Category":"Memory And Addressing","Word":"Indexed Addressing","Description":"Using an index register to access array elements","Id":"A0049"},{"Category":"Memory And Addressing","Word":"Base-Displacement Addressing","Description":"Adding an offset to a base register","Id":"A0050"},{"Category":"Memory And Addressing","Word":"Relative Addressing","Description":"Addressing relative to the current instruction pointer","Id":"A0051"},{"Category":"Memory And Addressing","Word":"Segment:Offest Addressing","Description":"Using segment and offset for addressing (in x86)","Id":"A0052"},{"Category":"Memory And Addressing","Word":"Little-Endian","Description":"Storing the least significant byte at the lowest address","Id":"A0053"},{"Category":"Memory And Addressing","Word":"Big-Endian","Description":"Storing the most significant byte at the lowest address","Id":"A0054"},{"Category":"Memory And Addressing","Word":"Memory Alignment","Description":"Arrangig data in memory on address boundaries","Id":"A0055"},{"Category":"Basic Instructions","Word":"MOV","Description":"Move/copy data between registers or memory","Id":"A0056"},{"Category":"Basic Instructions","Word":"ADD","Description":"add two operans","Id":"A0057"},{"Category":"Basic Instructions","Word":"SUB","Description":"Subtract second operan from first","Id":"A0058"},{"Category":"Basic Instructions","Word":"MUL","Description":"Unsigned multiplication","Id":"A0059"},{"Category":"Basic Instructions","Word":"DIV","Description":"Unsigned division","Id":"A0060"},{"Category":"Basic Instructions","Word":"INC","Description":"Increment value by one","Id":"A0061"},{"Category":"Basic Instructions","Word":"DEC","Description":"Decrement value by one","Id":"A0062"},{"Category":"Basic Instructions","Word":"AND","Description":"Bitwise AND operation","Id":"A0063"},{"Category":"Basic Instructions","Word":"OR","Description":"Bitwise OR operation","Id":"A0064"},{"Category":"Basic Instructions","Word":"XOR","Description":"Bitwise exclusive OR operation","Id":"A0065"},{"Category":"Basic Instructions","Word":"NOT","Description":"Bitwise complement","Id":"A0066"},{"Category":"Basic Instructions","Word":"SHL/SAL","Description":"Shift left (logical/arithmetic)","Id":"A0067"},{"Category":"Basic Instructions","Word":"SHR","Description":"Shift right logical","Id":"A0068"},{"Category":"Basic Instructions","Word":"SAR","Description":"Shift right arthmetic","Id":"A0069"},{"Category":"Basic Instructions","Word":"ROL","Description":"Rotate left","Id":"A0070"},{"Category":"Basic Instructions","Word":"ROR","Description":"Rotate right","Id":"A0071"},{"Category":"Basic Instructions","Word":"CMP","Description":"Compare operands (subtract without storing)","Id":"A0072"},{"Category":"Basic Instructions","Word":"TEST","Description":"Test bits (AND without storing)","Id":"A0073"},{"Category":"Basic Instructions","Word":"NOP","Description":"No operation (does nothing)","Id":"A0074"},{"Category":"Control Flow Instructions","Word":"JMP","Description":"Unconditional jump to a different location","Id":"A0075"},{"Category":"Control Flow Instructions","Word":"Jcc","Description":"Conditional jump based on flags (e.g., JE, JNE, JG)","Id":"A0076"},{"Category":"Control Flow Instructions","Word":"JE/JZ","Description":"Jump if equal/zero","Id":"A0077"},{"Category":"Control Flow Instructions","Word":"JNE/JNZ","Description":"Jump if greater/not less or equal","Id":"A0078"},{"Category":"Control Flow Instructions","Word":"JG/JNLE","Description":null,"Id":"A0079"},{"Category":"Control Flow Instructions","Word":"JGE/JNL","Description":"Jump if greater/not equal/not less","Id":"A0080"},{"Category":"Control Flow Instructions","Word":"JL/JNGE","Description":"Jump if less/not greater or equal","Id":"A0081"},{"Category":"Control Flow Instructions","Word":"JLE/JNG","Description":"Jump if less or equal/not greater","Id":"A0082"},{"Category":"Control Flow Instructions","Word":"LOOP","Description":"Decrement counter and jump if not zero","Id":"A0083"},{"Category":"Control Flow Instructions","Word":"CALL","Description":"Call asubroutine/function","Id":"A0084"},{"Category":"Control Flow Instructions","Word":"RET","Description":"Return from subroutine/function","Id":"A0085"},{"Category":"Control Flow Instructions","Word":"INT","Description":"Generate interrupt","Id":"A0086"},{"Category":"Control Flow Instructions","Word":"IRET","Description":"Return from interrupt handler","Id":"A0087"},{"Category":"Control Flow Instructions","Word":"SYSCALL/SYSTENTER","Description":"System call instruction","Id":"A0088"},{"Category":"Control Flow Instructions","Word":"HLT","Description":"Half processor execution","Id":"A0089"},{"Category":"Stack Operations","Word":"Stack","Description":"Last-In-First-Out (LIFO) data structure in memory","Id":"A0090"},{"Category":"Stack Operations","Word":"Stack Frame","Description":"Section of stack used by a function","Id":"A0091"},{"Category":"Stack Operations","Word":"PUSH","Description":"Push value onto the stack","Id":"A0092"},{"Category":"Stack Operations","Word":"POP","Description":"Pop value from the stack","Id":"A0093"},{"Category":"Stack Operations","Word":"PUSHAD/PUSHA","Description":"Push all general purpose registers","Id":"A0094"},{"Category":"Stack Operations","Word":"POPAD/POPA","Description":"Pop all general purpose registers","Id":"A0095"},{"Category":"Stack Operations","Word":"PUSHFD/PUSHF","Description":"Push flags register","Id":"A0096"},{"Category":"Stack Operations","Word":"POPFD/POPF","Description":"Pop flags register","Id":"A0097"},{"Category":"Stack Operations","Word":"ENTER","Description":"Create stack frame for a procedure","Id":"A0098"},{"Category":"Stack Operations","Word":"LEAVE","Description":"Destroy stack frame for a procedure","Id":"A0099"},{"Category":"Stack Operations","Word":"Stack Overflow","Description":"Condition when stack exceeds its allocation memory","Id":"A0100"},{"Category":"Stack Operations","Word":"Statck Underflow","Description":"Conditino when popping from an empty stack","Id":"A0101"},{"Category":"Procedure and Function Calling","Word":"Procedure/Subroutine","Description":"Reusable block of code","Id":"A0102"},{"Category":"Procedure and Function Calling","Word":"Function","Description":"Procedure that returns a value","Id":"A0103"},{"Category":"Procedure and Function Calling","Word":"Calling Convention","Description":"Rules for how functions receive parameters and return values","Id":"A0104"},{"Category":"Procedure and Function Calling","Word":"cdecl","Description":"C declaration calling convention","Id":"A0105"},{"Category":"Procedure and Function Calling","Word":"stdcall","Description":"Standard calling convention for Win32 API","Id":"A0106"},{"Category":"Procedure and Function Calling","Word":"fastcall","Description":"Optimized calling convention passing arguments in registers","Id":"A0107"},{"Category":"Procedure and Function Calling","Word":"Parameter Passing","Description":"Method of transferring arguments to a function","Id":"A0108"},{"Category":"Procedure and Function Calling","Word":"Return Value","Description":"Value returned by a function","Id":"A0109"},{"Category":"Procedure and Function Calling","Word":"Prologue","Description":"Instructions at the beginning of a function to set up the stack frame","Id":"A0110"},{"Category":"Procedure and Function Calling","Word":"Rescursive Call","Description":"Function that calls itself","Id":"A0111"},{"Category":"Procedure and Function Calling","Word":"Tall Call","Description":"Function call as the last action in a function","Id":"A0112"},{"Category":"Flags and Condition Codes","Word":"Flag","Description":"Binary indicator of a specific condition","Id":"A0113"},{"Category":"Flags and Condition Codes","Word":"Zero Flag (ZF)","Description":"Set when result of operation is zero","Id":"A0114"},{"Category":"Flags and Condition Codes","Word":"Carry Flag (CF)","Description":"Set when operating generates a carry","Id":"A0115"},{"Category":"Flags and Condition Codes","Word":"Overflow Flag (OF)","Description":"Set when signed arithmetic overflow occurs","Id":"A0116"},{"Category":"Flags and Condition Codes","Word":"Sign Flag (SF)","Description":"Set when result of operation is negative","Id":"A0117"},{"Category":"Flags and Condition Codes","Word":"Parity Flag (PF)","Description":"Set when result has beven number of 1 bits","Id":"A0118"},{"Category":"Flags and Condition Codes","Word":"Auxillary Carry Flag (AF)","Description":"Set when carry occurs between BCD digits","Id":"A0119"},{"Category":"Flags and Condition Codes","Word":"Direction Flag (DF)","Description":"Controls direction of string operations","Id":"A0120"},{"Category":"Flags and Condition Codes","Word":"Interrupt Flag (IF)","Description":"Controls whether CPU responds to interrupts","Id":"A0121"},{"Category":"Flags and Condition Codes","Word":"Trap Flag (TF)","Description":"Enables single-step debugging mode","Id":"A0122"},{"Category":"Flags and Condition Codes","Word":"CLC","Description":"Clear carry flag","Id":"A0123"},{"Category":"Flags and Condition Codes","Word":"STC","Description":"Set carry flag","Id":"A0124"},{"Category":"Flags and Condition Codes","Word":"CMC","Description":"Complement carry flag","Id":"A0125"},{"Category":"Input/Output Operations","Word":"Port","Description":"Interface for communication with external devices","Id":"A0126"},{"Category":"Input/Output Operations","Word":"IN","Description":"Read data from an I/O port","Id":"A0127"},{"Category":"Input/Output Operations","Word":"OUT","Description":"Write data to an I/O prot","Id":"A0128"},{"Category":"Input/Output Operations","Word":"Memory-Mapped I/O","Description":"Accessing devices through memory addresses","Id":"A0129"},{"Category":"Input/Output Operations","Word":"Port-Mapped I/O","Description":"Accessing devices through dedicated I/O ports","Id":"A0130"},{"Category":"Input/Output Operations","Word":"Interrupt-Driven I/O","Description":"I/O method using interrupts to signal completion","Id":"A0131"},{"Category":"Input/Output Operations","Word":"Polling","Description":"Repeatedly checking device status","Id":"A0132"},{"Category":"Input/Output Operations","Word":"DMA (Direct Memory Access)","Description":"Method allowing devices to access memory directly","Id":"A0133"},{"Category":"Input/Output Operations","Word":"I/O Ccontroller","Description":"Hardware that manages I/O operations","Id":"A0134"},{"Category":"Input/Output Operations","Word":"Device Driver","Description":"Software that communicates with hardware devices","Id":"A0135"},{"Category":"Advanced Instructions and Features","Word":"SIMD (Single Instruction, Multiple Data)","Description":"Processing multiple data elements with a single instruction","Id":"A0136"},{"Category":"Advanced Instructions and Features","Word":"MMX","Description":"Multimedia extension instruction set","Id":"A0137"},{"Category":"Advanced Instructions and Features","Word":"SSE (Streaming SIMD Extensions)","Description":"SIMD instruction set extension","Id":"A0138"},{"Category":"Advanced Instructions and Features","Word":"AVX (Advanced Vector Extensions)","Description":"SIMD instruction set with wider registers","Id":"A0139"},{"Category":"Advanced Instructions and Features","Word":"FPU (Floating Point Unit)","Description":"Hardware for floating-point arithmetic","Id":"A0140"},{"Category":"Advanced Instructions and Features","Word":"Atomic Operation","Description":"Operation that completes without interruption","Id":"A0141"},{"Category":"Advanced Instructions and Features","Word":"LOCK Prefix","Description":"Makes instruction execution atomic","Id":"A0142"},{"Category":"Advanced Instructions and Features","Word":"REP Prefix","Description":"Repeats string operation based on counter","Id":"A0143"},{"Category":"Advanced Instructions and Features","Word":"CPUID","Description":"Instructions to get processor identification and features","Id":"A0144"},{"Category":"Advanced Instructions and Features","Word":"Privileged Instruction","Description":"Instruction that can only run in kernel/supervisor mode","Id":"A0145"},{"Category":"Advanced Instructions and Features","Word":"Ring/Protection Level","Description":"CPU privilege level for execution","Id":"A0146"},{"Category":"Advanced Instructions and Features","Word":"Virtualization","Description":"Hardware support for virtual machines","Id":"A0147"},{"Category":"Directives and Assembler Controls","Word":"Directive","Description":"Command for the assembler (not converted to machine code)","Id":"A0148"},{"Category":"Directives and Assembler Controls","Word":"Label","Description":"Symbolic name for a memory location","Id":"A0149"},{"Category":"Directives and Assembler Controls","Word":"SECTION/SEGMENT","Description":"Directive to define a code or data section","Id":"A0150"},{"Category":"Directives and Assembler Controls","Word":"GLOBAL/PUBLIC","Description":"Directive to make symbols visible to the linker","Id":"A0151"},{"Category":"Directives and Assembler Controls","Word":"EXTERN","Description":"Directive to declare external symbols","Id":"A0152"},{"Category":"Directives and Assembler Controls","Word":"INCLUDE","Description":"Directive to include another source file","Id":"A0153"},{"Category":"Directives and Assembler Controls","Word":"MACRO","Description":"Directive to define a reusable block of code","Id":"A0154"},{"Category":"Directives and Assembler Controls","Word":"PROC/ENDP","Description":"Directive to define procedures","Id":"A0155"},{"Category":"Directives and Assembler Controls","Word":"IF/ENDIF","Description":"Conditional assembly directives","Id":"A0156"},{"Category":"Directives and Assembler Controls","Word":"REPEAT/REPT","Description":"Directive for repetitive assembly","Id":"A0157"},{"Category":"Directives and Assembler Controls","Word":"COMMENT","Description":"Directive for multi-line comments","Id":"A0158"},{"Category":"Directives and Assembler Controls","Word":"ORG","Description":"Directive to set the origin address","Id":"A0159"},{"Category":"Binary and Number Representation","Word":"Binary","Description":"Base-2 number system (0 and 1)","Id":"A0160"},{"Category":"Binary and Number Representation","Word":"Hexadecimal","Description":"Base-16 number system (0~9, A~F)","Id":"A0161"},{"Category":"Binary and Number Representation","Word":"Octal","Description":"base-8 number system (0~7)","Id":"A0162"},{"Category":"Binary and Number Representation","Word":"Decimal","Description":"Base-10 number system (0~9)","Id":"A0163"},{"Category":"Binary and Number Representation","Word":"BCD (Binary-Coded Decimal)","Description":"Encoding decimal digits in binary","Id":"A0164"},{"Category":"Binary and Number Representation","Word":"Two's Complement","Description":"Method for representing signed integers","Id":"A0165"},{"Category":"Binary and Number Representation","Word":"One's Complement","Description":"Binary representation formed by inverting all bits","Id":"A0166"},{"Category":"Binary and Number Representation","Word":"Sign Extension","Description":"Process of extending the sign bit when converting to larger size","Id":"A0167"},{"Category":"Binary and Number Representation","Word":"Bit Masking","Description":"Using bitwise operations to select specific bits","Id":"A0168"},{"Category":"Binary and Number Representation","Word":"Bit Manipulation","Description":"Changin individual bits in a value","Id":"A0169"},{"Category":"Debugging and Development Tools","Word":"Debugger","Description":"Tool for examing and controlling program execution","Id":"A0170"},{"Category":"Debugging and Development Tools","Word":"Breakpoint","Description":"Designated point where program execution pauses","Id":"A0171"},{"Category":"Debugging and Development Tools","Word":"Single-Stepping","Description":"Executing a program one instruction at a time","Id":"A0172"},{"Category":"Debugging and Development Tools","Word":"Trace","Description":"Record of program execution","Id":"A0173"},{"Category":"Debugging and Development Tools","Word":"Disassembler","Description":"Tool that converts machine code back to assembly","Id":"A0174"},{"Category":"Debugging and Development Tools","Word":"Hex Editor","Description":"Tool for viewing and editing binary files","Id":"A0175"},{"Category":"Debugging and Development Tools","Word":"Symbol Table","Description":"Data structure mapping symbolic names to addresses","Id":"A0176"},{"Category":"Debugging and Development Tools","Word":"Core Dump","Description":"Recorded state of a program's memory at a specific time","Id":"A0177"},{"Category":"Debugging and Development Tools","Word":"Profiler","Description":"Tool for analyzing program performance","Id":"A0178"},{"Category":"Debugging and Development Tools","Word":"Cross-Assembler","Description":"Assembler that runs on one platform but generates code for another","Id":"A0179"},{"Category":"Debugging and Development Tools","Word":"Emulator","Description":"Software that mimics the behavior of hardware","Id":"A0180"}]