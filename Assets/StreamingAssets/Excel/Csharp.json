[{"Category":"Types And Variables","Word":"Abstract Class","Description":"A restricted class that cannot be used to create objects and must be inherited by another class. It can have both abstract and regular methods.","Id":"S0000"},{"Category":"Types And Variables","Word":"Assembly","Description":"A compiled code library used for deployment, versioning, and security in .NET applications.","Id":"S0001"},{"Category":"Types And Variables","Word":"Async/Await","Description":"Keywords used for asynchronous programming, making it easier to work with tasks and promises.","Id":"S0002"},{"Category":"Types And Variables","Word":"Boxing","Description":"The process of converting a value type to the type object or any interface type implemented by this value type.","Id":"S0003"},{"Category":"Types And Variables","Word":"Delegate","Description":"A type that represents references to methods with a particular parameter list and return type.","Id":"S0004"},{"Category":"Types And Variables","Word":"Event","Description":"A mechnism for communication between objects, where one object can notify other objects when something of interest occurs.","Id":"S0005"},{"Category":"Types And Variables","Word":"Extension Method","Description":"A special kind of static method that adds new functionality to an existing type without modifying it.","Id":"S0006"},{"Category":"Types And Variables","Word":"Generic","Description":"A feature that introduces the concept of type parameters, enabling you to design classes and methods that can work with any data type.","Id":"S0007"},{"Category":"Types And Variables","Word":"Interface","Description":"A contract that defines a set of abstract members that implementing classes must provide.","Id":"S0008"},{"Category":"Types And Variables","Word":"Lambda Expression","Description":"An anonymous function that can contain expressions and statements, used to create delegates or expression tree types.","Id":"S0009"},{"Category":"Types And Variables","Word":"LINQ (Language Integrated Query)","Description":"A set of features that adds native data querying capabilities to .NET languages.","Id":"S0010"},{"Category":"Types And Variables","Word":"Namespace","Description":"A declarative region that organizes code into groups and prevents name collisions.","Id":"S0011"},{"Category":"Types And Variables","Word":"Nullable Types","Description":"Value types that can also store null values, declared using ? Operator.","Id":"S0012"},{"Category":"Types And Variables","Word":"Property","Description":"A member that provides a flexible mechanism to read, write, or compute the value of a private field.","Id":"S0013"},{"Category":"Types And Variables","Word":"Record","Description":"A reference type that provides built-in functionality for encapsulating data.","Id":"S0014"},{"Category":"Types And Variables","Word":"Struct","Description":"A value type that can encapsulate data and related functionality.","Id":"S0015"},{"Category":"Types And Variables","Word":"Tuple","Description":"A data structure that contains  sequence of elements of different data types.","Id":"S0016"},{"Category":"Types And Variables","Word":"Unboxing","Description":"The extraction of the value type from an object or interface type.","Id":"S0017"},{"Category":"Access Modifiers","Word":"internal","Description":"Access limited to the current assembly.","Id":"S0018"},{"Category":"Access Modifiers","Word":"private","Description":"Access limited to the containing type","Id":"S0019"},{"Category":"Access Modifiers","Word":"protected","Description":"Access limited to the containing class or derived classes within the same assembly.","Id":"S0020"},{"Category":"Access Modifiers","Word":"protected internal","Description":"Access limited to the current assembly or derived classes","Id":"S0021"},{"Category":"Keywords and Operators","Word":"as","Description":"Performs conversion between compatible reference types","Id":"S0022"},{"Category":"Keywords and Operators","Word":"base","Description":"References base class memebers","Id":"S0023"},{"Category":"Keywords and Operators","Word":"checked","Description":"Enables overflow checking for integer operations","Id":"S0024"},{"Category":"Keywords and Operators","Word":"const","Description":"Declares a constant field or local variable","Id":"S0025"},{"Category":"Keywords and Operators","Word":"default","Description":"Return the default value of a type","Id":"S0026"},{"Category":"Keywords and Operators","Word":"dynamic","Description":"Enables operations on objects at runtime","Id":"S0027"},{"Category":"Keywords and Operators","Word":"fixed","Description":"Prevents the garbage collector from relocating a variable","Id":"S0028"},{"Category":"Keywords and Operators","Word":"foreach","Description":"Iterates through collections","Id":"S0029"},{"Category":"Keywords and Operators","Word":"in","Description":"Parameter modifier that specifies the parameter is passed by reference but cannot be modified","Id":"S0030"},{"Category":"Keywords and Operators","Word":"is","Description":"Checks if an object is compatible with a given type","Id":"S0031"},{"Category":"Keywords and Operators","Word":"lock","Description":"Synchrnizes access to a block of code in multithreaded programs","Id":"S0032"},{"Category":"Keywords and Operators","Word":"out","Description":"Parameter modifier that must be assigned a value inside the method","Id":"S0033"},{"Category":"Keywords and Operators","Word":"params","Description":"Specifies a parameter that can take a variable number of arguments","Id":"S0034"},{"Category":"Keywords and Operators","Word":"ref","Description":"Parameter modifier that enables passing by reference","Id":"S0035"},{"Category":"Keywords and Operators","Word":"sealed","Description":"Prevents inheritance from a class","Id":"S0036"},{"Category":"Keywords and Operators","Word":"sizeof","Description":"Returns the size in bytes of a type","Id":"S0037"},{"Category":"Keywords and Operators","Word":"stackalloc","Description":"Allocates a block of memory on the stack","Id":"S0038"},{"Category":"Keywords and Operators","Word":"this","Description":"References the current instance of a class","Id":"S0039"},{"Category":"Keywords and Operators","Word":"unsafe","Description":"Denotes an unsafe context in which pointers can be used","Id":"S0040"},{"Category":"Keywords and Operators","Word":"using","Description":"Defines a scope at the end of which an object is disposed","Id":"S0041"},{"Category":"Keywords and Operators","Word":"volatile","Description":"Indicates that a field can be modified by multiple threads","Id":"S0042"},{"Category":"Keywords and Operators","Word":"where","Description":"Specifies constraints on generic type parameters","Id":"S0043"},{"Category":"Keywords and Operators","Word":"yield","Description":"Used to define an iterator block","Id":"S0044"},{"Category":"Memory Management","Word":"Garbage Collection","Description":"Automatic memory management system that frees memory occupied by unused objects","Id":"S0045"},{"Category":"Memory Management","Word":"Finalizer","Description":"Method called before an object is destroyed by garbage collection","Id":"S0046"},{"Category":"Memory Management","Word":"Idisposable","Description":"Interface that provides a mechanism for releasing unmanaged resources","Id":"S0047"},{"Category":"Memory Management","Word":"Memory Leak","Description":"Situation where memory is not properly released, causing the application to consume more memory over time","Id":"S0048"},{"Category":"Memory Management","Word":"Reference Type","Description":"Type that stores a reference to its data in memory","Id":"S0049"},{"Category":"Memory Management","Word":"Value Type","Description":"Type that stores its data directly in memory","Id":"S0050"},{"Category":"Threading and Asynchronous Programming","Word":"Task","Description":"Represents an asynchronous operation","Id":"S0051"},{"Category":"Threading and Asynchronous Programming","Word":"Task Parallel Library (TPL)","Description":"Set of APIs for paralled and concurrent programming","Id":"S0052"},{"Category":"Threading and Asynchronous Programming","Word":"Thread","Description":"Unity of execution whithin a process","Id":"S0053"},{"Category":"Threading and Asynchronous Programming","Word":"ThreadPool","Description":"Collection of worker threads managed by the runtime","Id":"S0054"},{"Category":"Threading and Asynchronous Programming","Word":"async","Description":"Modifier that marks a method as asynchronous","Id":"S0055"},{"Category":"Threading and Asynchronous Programming","Word":"await","Description":"Operator that suspeds execution unitl an asynchronous operation completes","Id":"S0056"},{"Category":"Threading and Asynchronous Programming","Word":"CancellationToken","Description":"Structure used to propagate notifications that operations should be cancel","Id":"S0057"},{"Category":"Threading and Asynchronous Programming","Word":"Semaphore","Description":"Synchronization primitive that controls access to a pool of resources","Id":"S0058"},{"Category":"Threading and Asynchronous Programming","Word":"SynchronizationContext","Description":"Provides a way to control where and how continuations of asynchronous operations are executed","Id":"S0059"},{"Category":"Design Patterns and Principles","Word":"Dependency Injection","Description":"Design pattern that implements inversion of control for resolving dependencies","Id":"S0060"},{"Category":"Design Patterns and Principles","Word":"Factory Pattern","Description":"Creational pattern that provides an interface for creating objects","Id":"S0061"},{"Category":"Design Patterns and Principles","Word":"Observer Pattern","Description":"Behavioral pattern that defines a one-to-many dependency between objects","Id":"S0062"},{"Category":"Design Patterns and Principles","Word":"Repository Pattern","Description":"Pattern that mediates between the domain and data mapping layers","Id":"S0063"},{"Category":"Design Patterns and Principles","Word":"Singleton Pattern","Description":"Ensures a class has only one instance and provides a global point of access to it","Id":"S0064"},{"Category":"Design Patterns and Principles","Word":"Strategy Pattern","Description":"Behavioral pattern that enables selecting an algorithm at runtime","Id":"S0065"},{"Category":"Testing and Debugging","Word":"Assert","Description":"Statement used in unit tests to verify conditions","Id":"S0066"},{"Category":"Testing and Debugging","Word":"Attribute","Description":"Declarative tag that can be applied to types, methods, parameters, and other entities","Id":"S0067"},{"Category":"Testing and Debugging","Word":"Exception","Description":"Object that represents an error that occurs during execution","Id":"S0068"},{"Category":"Testing and Debugging","Word":"Mock","Description":"Object that simulates the behavior of real objects in controlled ways","Id":"S0069"},{"Category":"Testing and Debugging","Word":"Unit Test","Description":"Method that tests a unit of code in isolation","Id":"S0070"},{"Category":"Testing and Debugging","Word":"xUnit","Description":"Popular unit testing framework for .NET","Id":"S0071"},{"Category":"Common Framework Components","Word":"ADO.NET","Description":"Set of classes that expose data access services to .NET programmers","Id":"S0072"},{"Category":"Common Framework Components","Word":"ASP.NET","Description":"Web application framework for building web apps and servies","Id":"S0073"},{"Category":"Common Framework Components","Word":"Entity Framework","Description":"Object-relational mapping framework","Id":"S0074"},{"Category":"Common Framework Components","Word":"NuGet","Description":"Package manager for .NET","Id":"S0075"},{"Category":"Common Framework Components","Word":"Reflection","Description":"Ability to examine, modify and create types at runtime","Id":"S0076"},{"Category":"Common Framework Components","Word":"WPF (Windows Presentation Foundation)","Description":"GUI framework for desktop applications","Id":"S0077"},{"Category":"Best Practices","Word":"Clean Code","Description":"Writing code that is easy to understand and maintain","Id":"S0078"},{"Category":"Best Practices","Word":"SOLID Principles","Description":"Set of five design principles for object-oriented programming","Id":"S0079"},{"Category":"Best Practices","Word":"Code Coverage","Description":"Measure of how much code is executed during testing","Id":"S0080"},{"Category":"Best Practices","Word":"Techinical Debt","Description":"Implied cost of additional rework caused by choosing an easy solution now instead of using a better approach that would take longer","Id":"S0081"},{"Category":"Best Practices","Word":"Refactoring","Description":"Process of restructuring existing code without changing its external behavior","Id":"S0082"},{"Category":"Control Flow statements","Word":"if-else","Description":"Conditional branching","Id":"S0083"},{"Category":"Control Flow statements","Word":"switch","Description":"Selection statement","Id":"S0084"},{"Category":"Control Flow statements","Word":"switch expression","Description":"Pattern matching (C# 8.0+)","Id":"S0085"},{"Category":"Control Flow statements","Word":"for","Description":"Counter-based iteration","Id":"S0086"},{"Category":"Control Flow statements","Word":"foreach","Description":"Collection-based iteration","Id":"S0087"},{"Category":"Control Flow statements","Word":"while","Description":"Condition-based iteration","Id":"S0088"},{"Category":"Control Flow statements","Word":"do-while","Description":"Post-condition iteration","Id":"S0089"},{"Category":"Control Flow statements","Word":"try-catch-finally","Description":"Exception handling","Id":"S0090"},{"Category":"Keyword","Word":"abstract","Description":"Used to declare an abstract class or method that must be implemented in a derived class.","Id":"S0091"},{"Category":"Keyword","Word":"as","Description":"Performs conversion between compatible reference types","Id":"S0092"},{"Category":"Keyword","Word":"base","Description":"Used to access members of the base class from within a derived class","Id":"S0093"},{"Category":"Keyword","Word":"bool","Description":"Declares a Boolean variable","Id":"S0094"},{"Category":"Keyword","Word":"break","Description":"Terminates the closest enclosing loop or switch statement","Id":"S0095"},{"Category":"Keyword","Word":"byte","Description":"Declares on 8-bit unsigned integer","Id":"S0096"},{"Category":"Keyword","Word":"case","Description":"Defines a case in a switch statement","Id":"S0097"},{"Category":"Keyword","Word":"catch","Description":"Catches exception generated in a try block","Id":"S0098"},{"Category":"Keyword","Word":"char","Description":"Declares a Unicode character","Id":"S0099"},{"Category":"Keyword","Word":"checked","Description":"Enables overflow checking for arithmetic operations","Id":"S0100"},{"Category":"Keyword","Word":"class","Description":"Declares a class","Id":"S0101"},{"Category":"Keyword","Word":"const","Description":"Declares a constant field or local variable","Id":"S0102"},{"Category":"Keyword","Word":"continue","Description":"Passes control to the next iteration of the loop","Id":"S0103"},{"Category":"Keyword","Word":"decimal","Description":"Declares a 128-bit precise decimal value","Id":"S0104"},{"Category":"Keyword","Word":"default","Description":"Specifies the default case in a switch statement or provides a default value","Id":"S0105"},{"Category":"Keyword","Word":"delegate","Description":"Declares a delegate type","Id":"S0106"},{"Category":"Keyword","Word":"do-while","Description":"Executes a statement or block until a condition is false","Id":"S0107"},{"Category":"Keyword","Word":"double","Description":"Declares a 64-bit double-precision floating point","Id":"S0108"},{"Category":"Keyword","Word":"else","Description":"Specifies that alternative in an if statement","Id":"S0109"},{"Category":"Keyword","Word":"enum","Description":"Declares an enumeration type","Id":"S0110"},{"Category":"Keyword","Word":"event","Description":"Declasres an event","Id":"S0111"},{"Category":"Keyword","Word":"explicit","Description":"Declares on explicit user-defined type conversion operator","Id":"S0112"},{"Category":"Keyword","Word":"extern","Description":"Declares a method implemented externally","Id":"S0113"},{"Category":"Keyword","Word":"False","Description":"Represents the boolean value false","Id":"S0114"},{"Category":"Keyword","Word":"finally","Description":"Specifies the code that always executes after try/catch","Id":"S0115"},{"Category":"Keyword","Word":"fixed","Description":"Prevents the garbage collector from relocating a variable","Id":"S0116"},{"Category":"Keyword","Word":"float","Description":"Declares a 32-bit single-precision floating point","Id":"S0117"},{"Category":"Keyword","Word":"for","Description":"Starts a for loop","Id":"S0118"},{"Category":"Keyword","Word":"foreach","Description":"Starts a foreach loop","Id":"S0119"},{"Category":"Keyword","Word":"goto","Description":"Transfers the program control to a labeled statement","Id":"S0120"},{"Category":"Keyword","Word":"if","Description":"Starts a conditional statement","Id":"S0121"},{"Category":"Keyword","Word":"implicit","Description":"Declares an implicit user-defined type conversion operator","Id":"S0122"},{"Category":"Keyword","Word":"in","Description":"Used in foreach statements or to specify generic parameter variance","Id":"S0123"},{"Category":"Keyword","Word":"int","Description":"Declares a 32-bit integer","Id":"S0124"},{"Category":"Keyword","Word":"interface","Description":"Declares an interface","Id":"S0125"},{"Category":"Keyword","Word":"is","Description":"Specifies that access is limited to the currently assembly","Id":"S0126"},{"Category":"Keyword","Word":"lock","Description":"Ensures that a block of code runs while holding a mutual exclusion lock","Id":"S0127"},{"Category":"Keyword","Word":"long","Description":"Declares a 64-bit integer","Id":"S0128"},{"Category":"Keyword","Word":"namespace","Description":"Declares a scope for identifiers","Id":"S0129"},{"Category":"Keyword","Word":"new","Description":"Creates a new instance or hides an inherited member","Id":"S0130"},{"Category":"Keyword","Word":"Nullable Types","Description":"Represents a null reference","Id":"S0131"},{"Category":"Keyword","Word":"object","Description":"Declares an instance of the Object class","Id":"S0132"},{"Category":"Keyword","Word":"operator","Description":"Declares an operator","Id":"S0133"},{"Category":"Keyword","Word":"out","Description":"Creates an output parameter or specifies generic parameter variance","Id":"S0134"},{"Category":"Keyword","Word":"override","Description":"Overrides a virtual member in a base class","Id":"S0135"},{"Category":"Keyword","Word":"params","Description":"Specifies a parameter array","Id":"S0136"},{"Category":"Keyword","Word":"private","Description":"Specifies that access is limited to the containing type","Id":"S0137"},{"Category":"Keyword","Word":"protected","Description":"Specifies that access is limited to the containing type or derived types","Id":"S0138"},{"Category":"Keyword","Word":"public","Description":"Specifies that access is not restricted","Id":"S0139"},{"Category":"Keyword","Word":"readonly","Description":"Declares a field that can only be assigned once","Id":"S0140"},{"Category":"Keyword","Word":"ref","Description":"Creates a reference parameter or returns a reference","Id":"S0141"},{"Category":"Keyword","Word":"return","Description":"Returns control to the calling method","Id":"S0142"},{"Category":"Keyword","Word":"sbyte","Description":"Declares an 8 -bit signed integer","Id":"S0143"},{"Category":"Keyword","Word":"sealed","Description":"Prevents a class from being inherited","Id":"S0144"},{"Category":"Keyword","Word":"short","Description":"Declares a 16-bit integer","Id":"S0145"},{"Category":"Keyword","Word":"sizeof","Description":"Returns the size of a type in bytes","Id":"S0146"},{"Category":"Keyword","Word":"stackalloc","Description":"Allocates memory on the stack","Id":"S0147"},{"Category":"Keyword","Word":"static","Description":"Declares a member that belongs to the type rather than an instance","Id":"S0148"},{"Category":"Keyword","Word":"string","Description":"Declares a string variable","Id":"S0149"},{"Category":"Keyword","Word":"struct","Description":"Declares a structure type","Id":"S0150"},{"Category":"Keyword","Word":"switch","Description":"Selects one section of code to execute from multiple choices","Id":"S0151"},{"Category":"Keyword","Word":"this","Description":"Refers to the current instance","Id":"S0152"},{"Category":"Keyword","Word":"throw","Description":"Throws an exception","Id":"S0153"},{"Category":"Keyword","Word":"True","Description":"Represents the boolean value true","Id":"S0154"},{"Category":"Keyword","Word":"try","Description":"Implements exception handling","Id":"S0155"},{"Category":"Keyword","Word":"typeof","Description":"Gets the system.Type object for a type","Id":"S0156"},{"Category":"Keyword","Word":"uint","Description":"Declares a 32-bit unsigned integer","Id":"S0157"},{"Category":"Keyword","Word":"ulong","Description":"Declares a 64-bit unsigned integer","Id":"S0158"},{"Category":"Keyword","Word":"unchecked","Description":"Disables overflow checking for arthmetic operations","Id":"S0159"},{"Category":"Keyword","Word":"unsafe","Description":"Declares an unsafe context","Id":"S0160"},{"Category":"Keyword","Word":"ushort","Description":"Declares a 16-bit unsigned integer","Id":"S0161"},{"Category":"Keyword","Word":"using","Description":"Imports namespaces or disposes objects","Id":"S0162"},{"Category":"Keyword","Word":"virtual","Description":"Declares a method or property that can be overridden","Id":"S0163"},{"Category":"Keyword","Word":"void","Description":"Specifies that a method doesn't return a value","Id":"S0164"},{"Category":"Keyword","Word":"volatile","Description":"Indicates that a field can be modified by multiple threads","Id":"S0165"},{"Category":"Keyword","Word":"while","Description":"Executes a statement or block while a condition is true","Id":"S0166"},{"Category":"Keyword","Word":"add","Description":"Defines a custom event accessor","Id":"S0167"},{"Category":"Keyword","Word":"and","Description":"Used in pattern matching (C# 9.0+)","Id":"S0168"},{"Category":"Keyword","Word":"alias","Description":"Used with extern alias","Id":"S0169"},{"Category":"Keyword","Word":"ascending","Description":"Used in LINQ query expressions","Id":"S0170"},{"Category":"Keyword","Word":"async","Description":"Indicates that a method is asynchronous","Id":"S0171"},{"Category":"Keyword","Word":"await","Description":"Suspends execution until an asynchronous operation completes","Id":"S0172"},{"Category":"Keyword","Word":"by","Description":"Used in LINQ query expressions","Id":"S0173"},{"Category":"Keyword","Word":"descending","Description":"Used in LINQ query expressions","Id":"S0174"},{"Category":"Keyword","Word":"dynamic","Description":"Defines a dynamic type variable","Id":"S0175"},{"Category":"Keyword","Word":"equals","Description":"Used in LINQ query expressions","Id":"S0176"},{"Category":"Keyword","Word":"file","Description":"Limits a top-level type's scope to the file (C# 11+)","Id":"S0177"},{"Category":"Keyword","Word":"from","Description":"Used in LINQ query expressions","Id":"S0178"},{"Category":"Keyword","Word":"get","Description":"Defines an accessor method in a property","Id":"S0179"},{"Category":"Keyword","Word":"global","Description":"References the global namespace","Id":"S0180"},{"Category":"Keyword","Word":"group","Description":"Used in LINQ query expressions","Id":"S0181"},{"Category":"Keyword","Word":"init","Description":"Defines a property initializer (C#9.0+)","Id":"S0182"},{"Category":"Keyword","Word":"into","Description":"Used in LINQ query expressions","Id":"S0183"},{"Category":"Keyword","Word":"join","Description":"Used in LINQ query expressions","Id":"S0184"},{"Category":"Keyword","Word":"let","Description":"Used in LINQ query expressions","Id":"S0185"},{"Category":"Keyword","Word":"nameof","Description":"Get the name of a variable, type, or member as string","Id":"S0186"},{"Category":"Keyword","Word":"not","Description":"Used in pattern matching (C#9.0+)","Id":"S0187"},{"Category":"Keyword","Word":"notnull","Description":"used for generic constraints","Id":"S0188"},{"Category":"Keyword","Word":"on","Description":"Used in LINQ query expressions","Id":"S0189"},{"Category":"Keyword","Word":"or","Description":"Used in pattern matching (C# 9.0+)","Id":"S0190"},{"Category":"Keyword","Word":"orderby","Description":"Used in LINQ query expressions","Id":"S0191"},{"Category":"Keyword","Word":"partial","Description":"Used in pattern matching (C# 9.0+)","Id":"S0192"},{"Category":"Keyword","Word":"record","Description":"Declares a record type (C# 9.0+)","Id":"S0193"},{"Category":"Keyword","Word":"remove","Description":"Defines a custome event accessor","Id":"S0194"},{"Category":"Keyword","Word":"required","Description":"Marks a property as required (C# 11+)","Id":"S0195"},{"Category":"Keyword","Word":"scoped","Description":"Limits ref struct lifetime (C# 11+)","Id":"S0196"},{"Category":"Keyword","Word":"select","Description":"Used in LINQ query expressions","Id":"S0197"},{"Category":"Keyword","Word":"set","Description":"Defines an accessor method in a property","Id":"S0198"},{"Category":"Keyword","Word":"value","Description":"Used to set valules in property setters","Id":"S0199"},{"Category":"Keyword","Word":"var","Description":"Declares an implicitly typed local variable","Id":"S0200"},{"Category":"Keyword","Word":"when","Description":"Specifies a condition in a catch clause or in pattern matching","Id":"S0201"},{"Category":"Keyword","Word":"where","Description":"Used in LINQ query expressions or for generic type constraints","Id":"S0202"},{"Category":"Keyword","Word":"with","Description":"Used for record cloning with property modifications (C# 9.0+)","Id":"S0203"},{"Category":"Keyword","Word":"yield","Description":"Used in iterator methods to return a value or signal completion","Id":"S0204"},{"Category":"Keyword","Word":"record","Description":"Declares a reference record type","Id":"S0205"},{"Category":"Keyword","Word":"record struct","Description":"Declares a value record type (C# 10+)","Id":"S0206"},{"Category":"Keyword","Word":"required","Description":"Marks a property as required for object initialization (C# 11+)","Id":"S0207"},{"Category":"Keyword","Word":"scoped","Description":"Controls the lifetime of a ref struct (C# 11+)","Id":"S0208"},{"Category":"Keyword","Word":"file","Description":"Limits a top-level type's scope to the file (C# 11+)","Id":"S0209"},{"Category":"Keyword","Word":"nint","Description":"Platform-specific signed integer (native int)","Id":"S0210"},{"Category":"Keyword","Word":"nunit","Description":"Platform-specific unsigned integer (native uint)","Id":"S0211"},{"Category":"Keyword","Word":"init","Description":"Property intializer accessor","Id":"S0212"}]