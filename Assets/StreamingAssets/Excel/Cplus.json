[{"Category":"Types And Variables","Word":"Abstract Class","Description":"A restricted class that cannot be used to create objects and must be inherited by another class. It can have both abstract and regular methods.","Id":"P0000"},{"Category":"Types And Variables","Word":"Assembly","Description":"A compiled code library used for deployment, versioning, and security in .NET applications.","Id":"P0001"},{"Category":"Types And Variables","Word":"Async/Await","Description":"Keywords used for asynchronous programming, making it easier to work with tasks and promises.","Id":"P0002"},{"Category":"Types And Variables","Word":"Boxing","Description":"The process of converting a value type to the type object or any interface type implemented by this value type.","Id":"P0003"},{"Category":"Types And Variables","Word":"Delegate","Description":"A type that represents references to methods with a particular parameter list and return type.","Id":"P0004"},{"Category":"Types And Variables","Word":"Event","Description":"A mechnism for communication between objects, where one object can notify other objects when something of interest occurs.","Id":"P0005"},{"Category":"Types And Variables","Word":"Extension Method","Description":"A special kind of static method that adds new functionality to an existing type without modifying it.","Id":"P0006"},{"Category":"Types And Variables","Word":"Generic","Description":"A feature that introduces the concept of type parameters, enabling you to design classes and methods that can work with any data type.","Id":"P0007"},{"Category":"Types And Variables","Word":"Interface","Description":"A contract that defines a set of abstract members that implementing classes must provide.","Id":"P0008"},{"Category":"Types And Variables","Word":"Lambda Expression","Description":"An anonymous function that can contain expressions and statements, used to create delegates or expression tree types.","Id":"P0009"},{"Category":"Types And Variables","Word":"LINQ (Language Integrated Query)","Description":"A set of features that adds native data querying capabilities to .NET languages.","Id":"P0010"},{"Category":"Types And Variables","Word":"Namespace","Description":"A declarative region that organizes code into groups and prevents name collisions.","Id":"P0011"},{"Category":"Types And Variables","Word":"Nullable Types","Description":"Value types that can also store null values, declared using ? Operator.","Id":"P0012"},{"Category":"Types And Variables","Word":"Property","Description":"A member that provides a flexible mechanism to read, write, or compute the value of a private field.","Id":"P0013"},{"Category":"Types And Variables","Word":"Record","Description":"A reference type that provides built-in functionality for encapsulating data.","Id":"P0014"},{"Category":"Types And Variables","Word":"Struct","Description":"A value type that can encapsulate data and related functionality.","Id":"P0015"},{"Category":"Types And Variables","Word":"Tuple","Description":"A data structure that contains  sequence of elements of different data types.","Id":"P0016"},{"Category":"Types And Variables","Word":"Unboxing","Description":"The extraction of the value type from an object or interface type.","Id":"P0017"},{"Category":"Access Modifiers","Word":"internal","Description":"Access limited to the current assembly.","Id":"P0018"},{"Category":"Access Modifiers","Word":"private","Description":"Access limited to the containing type","Id":"P0019"},{"Category":"Access Modifiers","Word":"protected","Description":"Access limited to the containing class or derived classes within the same assembly.","Id":"P0020"},{"Category":"Access Modifiers","Word":"protected internal","Description":"Access limited to the current assembly or derived classes","Id":"P0021"},{"Category":"Keywords and Operators","Word":"as","Description":"Performs conversion between compatible reference types","Id":"P0022"},{"Category":"Keywords and Operators","Word":"base","Description":"References base class memebers","Id":"P0023"},{"Category":"Keywords and Operators","Word":"checked","Description":"Enables overflow checking for integer operations","Id":"P0024"},{"Category":"Keywords and Operators","Word":"const","Description":"Declares a constant field or local variable","Id":"P0025"},{"Category":"Keywords and Operators","Word":"default","Description":"Return the default value of a type","Id":"P0026"},{"Category":"Keywords and Operators","Word":"dynamic","Description":"Enables operations on objects at runtime","Id":"P0027"},{"Category":"Keywords and Operators","Word":"fixed","Description":"Prevents the garbage collector from relocating a variable","Id":"P0028"},{"Category":"Keywords and Operators","Word":"foreach","Description":"Iterates through collections","Id":"P0029"},{"Category":"Keywords and Operators","Word":"in","Description":"Parameter modifier that specifies the parameter is passed by reference but cannot be modified","Id":"P0030"},{"Category":"Keywords and Operators","Word":"is","Description":"Checks if an object is compatible with a given type","Id":"P0031"},{"Category":"Keywords and Operators","Word":"lock","Description":"Synchrnizes access to a block of code in multithreaded programs","Id":"P0032"},{"Category":"Keywords and Operators","Word":"out","Description":"Parameter modifier that must be assigned a value inside the method","Id":"P0033"},{"Category":"Keywords and Operators","Word":"params","Description":"Specifies a parameter that can take a variable number of arguments","Id":"P0034"},{"Category":"Keywords and Operators","Word":"ref","Description":"Parameter modifier that enables passing by reference","Id":"P0035"},{"Category":"Keywords and Operators","Word":"sealed","Description":"Prevents inheritance from a class","Id":"P0036"},{"Category":"Keywords and Operators","Word":"sizeof","Description":"Returns the size in bytes of a type","Id":"P0037"},{"Category":"Keywords and Operators","Word":"stackalloc","Description":"Allocates a block of memory on the stack","Id":"P0038"},{"Category":"Keywords and Operators","Word":"this","Description":"References the current instance of a class","Id":"P0039"},{"Category":"Keywords and Operators","Word":"unsafe","Description":"Denotes an unsafe context in which pointers can be used","Id":"P0040"},{"Category":"Keywords and Operators","Word":"using","Description":"Defines a scope at the end of which an object is disposed","Id":"P0041"},{"Category":"Keywords and Operators","Word":"volatile","Description":"Indicates that a field can be modified by multiple threads","Id":"P0042"},{"Category":"Keywords and Operators","Word":"where","Description":"Specifies constraints on generic type parameters","Id":"P0043"},{"Category":"Keywords and Operators","Word":"yield","Description":"Used to define an iterator block","Id":"P0044"},{"Category":"Memory Management","Word":"Garbage Collection","Description":"Automatic memory management system that frees memory occupied by unused objects","Id":"P0045"},{"Category":"Memory Management","Word":"Finalizer","Description":"Method called before an object is destroyed by garbage collection","Id":"P0046"},{"Category":"Memory Management","Word":"Idisposable","Description":"Interface that provides a mechanism for releasing unmanaged resources","Id":"P0047"},{"Category":"Memory Management","Word":"Memory Leak","Description":"Situation where memory is not properly released, causing the application to consume more memory over time","Id":"P0048"},{"Category":"Memory Management","Word":"Reference Type","Description":"Type that stores a reference to its data in memory","Id":"P0049"},{"Category":"Memory Management","Word":"Value Type","Description":"Type that stores its data directly in memory","Id":"P0050"},{"Category":"Threading and Asynchronous Programming","Word":"Task","Description":"Represents an asynchronous operation","Id":"P0051"},{"Category":"Threading and Asynchronous Programming","Word":"Task Parallel Library (TPL)","Description":"Set of APIs for paralled and concurrent programming","Id":"P0052"},{"Category":"Threading and Asynchronous Programming","Word":"Thread","Description":"Unity of execution whithin a process","Id":"P0053"},{"Category":"Threading and Asynchronous Programming","Word":"ThreadPool","Description":"Collection of worker threads managed by the runtime","Id":"P0054"},{"Category":"Threading and Asynchronous Programming","Word":"async","Description":"Modifier that marks a method as asynchronous","Id":"P0055"},{"Category":"Threading and Asynchronous Programming","Word":"await","Description":"Operator that suspeds execution unitl an asynchronous operation completes","Id":"P0056"},{"Category":"Threading and Asynchronous Programming","Word":"CancellationToken","Description":"Structure used to propagate notifications that operations should be cancel","Id":"P0057"},{"Category":"Threading and Asynchronous Programming","Word":"Semaphore","Description":"Synchronization primitive that controls access to a pool of resources","Id":"P0058"},{"Category":"Threading and Asynchronous Programming","Word":"SynchronizationContext","Description":"Provides a way to control where and how continuations of asynchronous operations are executed","Id":"P0059"},{"Category":"Design Patterns and Principles","Word":"Dependency Injection","Description":"Design pattern that implements inversion of control for resolving dependencies","Id":"P0060"},{"Category":"Design Patterns and Principles","Word":"Factory Pattern","Description":"Creational pattern that provides an interface for creating objects","Id":"P0061"},{"Category":"Design Patterns and Principles","Word":"Observer Pattern","Description":"Behavioral pattern that defines a one-to-many dependency between objects","Id":"P0062"},{"Category":"Design Patterns and Principles","Word":"Repository Pattern","Description":"Pattern that mediates between the domain and data mapping layers","Id":"P0063"},{"Category":"Design Patterns and Principles","Word":"Singleton Pattern","Description":"Ensures a class has only one instance and provides a global point of access to it","Id":"P0064"},{"Category":"Design Patterns and Principles","Word":"Strategy Pattern","Description":"Behavioral pattern that enables selecting an algorithm at runtime","Id":"P0065"},{"Category":"Testing and Debugging","Word":"Assert","Description":"Statement used in unit tests to verify conditions","Id":"P0066"},{"Category":"Testing and Debugging","Word":"Attribute","Description":"Declarative tag that can be applied to types, methods, parameters, and other entities","Id":"P0067"},{"Category":"Testing and Debugging","Word":"Exception","Description":"Object that represents an error that occurs during execution","Id":"P0068"},{"Category":"Testing and Debugging","Word":"Mock","Description":"Object that simulates the behavior of real objects in controlled ways","Id":"P0069"},{"Category":"Testing and Debugging","Word":"Unit Test","Description":"Method that tests a unit of code in isolation","Id":"P0070"},{"Category":"Testing and Debugging","Word":"xUnit","Description":"Popular unit testing framework for .NET","Id":"P0071"},{"Category":"Common Framework Components","Word":"ADO.NET","Description":"Set of classes that expose data access services to .NET programmers","Id":"P0072"},{"Category":"Common Framework Components","Word":"ASP.NET","Description":"Web application framework for building web apps and servies","Id":"P0073"},{"Category":"Common Framework Components","Word":"Entity Framework","Description":"Object-relational mapping framework","Id":"P0074"},{"Category":"Common Framework Components","Word":"NuGet","Description":"Package manager for .NET","Id":"P0075"},{"Category":"Common Framework Components","Word":"Reflection","Description":"Ability to examine, modify and create types at runtime","Id":"P0076"},{"Category":"Common Framework Components","Word":"WPF (Windows Presentation Foundation)","Description":"GUI framework for desktop applications","Id":"P0077"},{"Category":"Best Practices","Word":"Clean Code","Description":"Writing code that is easy to understand and maintain","Id":"P0078"},{"Category":"Best Practices","Word":"SOLID Principles","Description":"Set of five design principles for object-oriented programming","Id":"P0079"},{"Category":"Best Practices","Word":"Code Coverage","Description":"Measure of how much code is executed during testing","Id":"P0080"},{"Category":"Best Practices","Word":"Techinical Debt","Description":"Implied cost of additional rework caused by choosing an easy solution now instead of using a better approach that would take longer","Id":"P0081"},{"Category":"Best Practices","Word":"Refactoring","Description":"Process of restructuring existing code without changing its external behavior","Id":"P0082"},{"Category":"Control Flow statements","Word":"if-else","Description":"Conditional branching","Id":"P0083"},{"Category":"Control Flow statements","Word":"switch","Description":"Selection statement","Id":"P0084"},{"Category":"Control Flow statements","Word":"switch expression","Description":"Pattern matching (C# 8.0+)","Id":"P0085"},{"Category":"Control Flow statements","Word":"for","Description":"Counter-based iteration","Id":"P0086"},{"Category":"Control Flow statements","Word":"foreach","Description":"Collection-based iteration","Id":"P0087"},{"Category":"Control Flow statements","Word":"while","Description":"Condition-based iteration","Id":"P0088"},{"Category":"Control Flow statements","Word":"do-while","Description":"Post-condition iteration","Id":"P0089"},{"Category":"Control Flow statements","Word":"try-catch-finally","Description":"Exception handling","Id":"P0090"},{"Category":"keyword","Word":"alignas","Description":"Specifies the alignment requirement of a variable or type (C++11).","Id":"P0091"},{"Category":"keyword","Word":"alignof","Description":"Returns the alignment requirement of a type (C++11).","Id":"P0092"},{"Category":"keyword","Word":"and","Description":"Alternative spelling of &&","Id":"P0093"},{"Category":"keyword","Word":"and_eq","Description":"Alternative spelling of &=","Id":"P0094"},{"Category":"keyword","Word":"asm","Description":"Insert assembly language code directly into the C++ program.","Id":"P0095"},{"Category":"keyword","Word":"auto","Description":"Deduces the type of a variable from its initializer (C++11); declares a variable with automatic storage duration (legacy).","Id":"P0096"},{"Category":"keyword","Word":"bitand","Description":"Alternative spelling of &.","Id":"P0097"},{"Category":"keyword","Word":"bitor","Description":"Alternative spelling of |","Id":"P0098"},{"Category":"keyword","Word":"bool","Description":"Boolean data type with values and false.","Id":"P0099"},{"Category":"keyword","Word":"break","Description":"Terminates the current loop or switch statement.","Id":"P0100"},{"Category":"keyword","Word":"case","Description":"A label in a switch statement.","Id":"P0101"},{"Category":"keyword","Word":"catch","Description":"Specifies exception handlers in a try block.","Id":"P0102"},{"Category":"keyword","Word":"char","Description":"Character data type, typically 1 byte.","Id":"P0103"},{"Category":"keyword","Word":"char8_t","Description":"UTF-8 character type (C++20).","Id":"P0104"},{"Category":"keyword","Word":"char16_t","Description":"UTF-16 character type (C++11).","Id":"P0105"},{"Category":"keyword","Word":"char32_t","Description":"UTF-32 character type (C++11).","Id":"P0106"},{"Category":"keyword","Word":"class","Description":"Defines a class type.","Id":"P0107"},{"Category":"keyword","Word":"compl","Description":"Alternative spelling of~.","Id":"P0108"},{"Category":"keyword","Word":"concept","Description":"Specifies contraints on template parameters (C++20).","Id":"P0109"},{"Category":"keyword","Word":"const","Description":"Declares that a variable's value cannot be modified.","Id":"P0110"},{"Category":"keyword","Word":"consteval","Description":"Specifies that a function is evaluated at compile time (C++20).","Id":"P0111"},{"Category":"keyword","Word":"constexpr","Description":"Specifies that a value can be calculated at compile time (C++11).","Id":"P0112"},{"Category":"keyword","Word":"constinit","Description":"Ensures initialization at compile time without implying constexpr (C++20).","Id":"P0113"},{"Category":"keyword","Word":"const_cast","Description":"Removes const, volatile, and _unaligned qualifiers.","Id":"P0114"},{"Category":"keyword","Word":"continue","Description":"Skips to the next iteration of a loop.","Id":"P0115"},{"Category":"keyword","Word":"co_await","Description":"Suspends coroutine execution until awaited operation completes (C++20).","Id":"P0116"},{"Category":"keyword","Word":"co_return","Description":"Returns control from a coroutine (C++20).","Id":"P0117"},{"Category":"keyword","Word":"co_yield","Description":"Yields a value from a coroutine and suspends execution (C++20).","Id":"P0118"},{"Category":"keyword","Word":"decltype","Description":"Deduces the type of an expression (C++11).","Id":"P0119"},{"Category":"keyword","Word":"default","Description":"Default label in a switch statement; default implementation of a special member function (C++11).","Id":"P0120"},{"Category":"keyword","Word":"delete","Description":"Deallocates memory; specifies deleted functions (C++11).","Id":"P0121"},{"Category":"keyword","Word":"do","Description":"Begins a do-while loop.","Id":"P0122"},{"Category":"keyword","Word":"double","Description":"Double-precision floating-point type.","Id":"P0123"},{"Category":"keyword","Word":"dynamic_cast","Description":"Safe downcasting in inheritance hierarchies.","Id":"P0124"},{"Category":"keyword","Word":"else","Description":"Alternative path in an if statement.","Id":"P0125"},{"Category":"keyword","Word":"enum","Description":"Defines an enumeration type.","Id":"P0126"},{"Category":"keyword","Word":"explicit","Description":"Specifies that a constructor or conversion functino cannot be used for implicit conversions.","Id":"P0127"},{"Category":"keyword","Word":"export","Description":"For module support (C++20); previously deprecated in C++98/C++03.","Id":"P0128"},{"Category":"keyword","Word":"extern","Description":"Declares a variable or function defined in another translation unit.","Id":"P0129"},{"Category":"keyword","Word":"False","Description":"Boolean literal representing the false value.","Id":"P0130"},{"Category":"keyword","Word":"float","Description":"Single-precision floating-point type.","Id":"P0131"},{"Category":"keyword","Word":"for","Description":"Begins a for loop.","Id":"P0132"},{"Category":"keyword","Word":"friend","Description":"Grants non-member functinos or classes access to private members.","Id":"P0133"},{"Category":"keyword","Word":"goto","Description":"Transfers control to a labeled statement.","Id":"P0134"},{"Category":"keyword","Word":"if","Description":"Begins a conditional statement.","Id":"P0135"},{"Category":"keyword","Word":"import","Description":"Imports a module or header (C++20)","Id":"P0136"},{"Category":"keyword","Word":"inline","Description":"Suggests function inlining; defines a functino or variable in multiple translation units (C++17)","Id":"P0137"},{"Category":"keyword","Word":"int","Description":"Integer data type.","Id":"P0138"},{"Category":"keyword","Word":"long","Description":"Long integer type or type modifier.","Id":"P0139"},{"Category":"keyword","Word":"mutable","Description":"Allows modification of class member even in const objects.","Id":"P0140"},{"Category":"keyword","Word":"Namespace","Description":"Creates a named scope for identifiers.","Id":"P0141"},{"Category":"keyword","Word":"new","Description":"Allocates memory","Id":"P0142"},{"Category":"keyword","Word":"noexcept","Description":"Specifies that a function doesn't throw exceptions (C++11).","Id":"P0143"},{"Category":"keyword","Word":"not","Description":"Alternative spelling of !","Id":"P0144"},{"Category":"keyword","Word":"not_eq","Description":"Alternative spelling of !=","Id":"P0145"},{"Category":"keyword","Word":"nullptr","Description":"Null pointer literal (C++11).","Id":"P0146"},{"Category":"keyword","Word":"operator","Description":"Defines operator overloading functions.","Id":"P0147"},{"Category":"keyword","Word":"or","Description":"Alternative spelling of ||","Id":"P0148"},{"Category":"keyword","Word":"or_eq","Description":"Alternative spelling of |=","Id":"P0149"},{"Category":"keyword","Word":"private","Description":"Specifies access control for class members.","Id":"P0150"},{"Category":"keyword","Word":"protected","Description":"Specifies access control for class members.","Id":"P0151"},{"Category":"keyword","Word":"public","Description":"Specifies access control for class members.","Id":"P0152"},{"Category":"keyword","Word":"register","Description":"Hint for compiler optimization (deprecated in C++17).","Id":"P0153"},{"Category":"keyword","Word":"reinterpret_cast","Description":"Converts between unrelated pointer types.","Id":"P0154"},{"Category":"keyword","Word":"requires","Description":"Specfies constraints for templates (C++20).","Id":"P0155"},{"Category":"keyword","Word":"return","Description":"Returns from a function.","Id":"P0156"},{"Category":"keyword","Word":"short","Description":"Short integer type or type modifier.","Id":"P0157"},{"Category":"keyword","Word":"signed","Description":"Specifies that a type can represent both positive and negative values.","Id":"P0158"},{"Category":"keyword","Word":"sizeof","Description":"Returns the size in bytes of a type or variable.","Id":"P0159"},{"Category":"keyword","Word":"static","Description":"Creates class members shared by all instances; preserves variable value between function calls; limits scope to file.","Id":"P0160"},{"Category":"keyword","Word":"static_assert","Description":"Performs compile-time assertion checking (C++11).","Id":"P0161"},{"Category":"keyword","Word":"static_cast","Description":"Performs conversions between related types.","Id":"P0162"},{"Category":"keyword","Word":"struct","Description":"Defines a structure (similar to class but with public default access).","Id":"P0163"},{"Category":"keyword","Word":"switch","Description":"Multi-way conditional branching statement.","Id":"P0164"},{"Category":"keyword","Word":"template","Description":"Defines a template for generating generic code.","Id":"P0165"},{"Category":"keyword","Word":"this","Description":"Pointer to the current instance of a class.","Id":"P0166"},{"Category":"keyword","Word":"thread_local","Description":"Specifies thread storage duration (C++).","Id":"P0167"},{"Category":"keyword","Word":"throw","Description":"Throws an exception.","Id":"P0168"},{"Category":"keyword","Word":"True","Description":"Boolean literal representing the true value.","Id":"P0169"},{"Category":"keyword","Word":"try","Description":"Begins a block of code for exception handling.","Id":"P0170"},{"Category":"keyword","Word":"typedef","Description":"Creates an alias for an existing type.","Id":"P0171"},{"Category":"keyword","Word":"typeid","Description":"Returns type information.","Id":"P0172"},{"Category":"keyword","Word":"typename","Description":"Declares a type parameter in a template; specifies that a dependent name is a type.","Id":"P0173"},{"Category":"keyword","Word":"union","Description":"Defines a union type where members share the same memory.","Id":"P0174"},{"Category":"keyword","Word":"unsigned","Description":"Specifies that a type can only represent non-negative values.","Id":"P0175"},{"Category":"keyword","Word":"using","Description":"Introduces a namespace or type name into current scope; creates type aliases (C++11).","Id":"P0176"},{"Category":"keyword","Word":"virtual","Description":"Enables polymorphism for class functions.","Id":"P0177"},{"Category":"keyword","Word":"void","Description":"Indicates no type or return value.","Id":"P0178"},{"Category":"keyword","Word":"volatile","Description":"Indicates that a variable can change unexpectedly.","Id":"P0179"},{"Category":"keyword","Word":"wchar_t","Description":"Wide character type.","Id":"P0180"},{"Category":"keyword","Word":"while","Description":"Begins a while loop.","Id":"P0181"},{"Category":"keyword","Word":"xor","Description":"Alternative spelling of^","Id":"P0182"},{"Category":"keyword","Word":"xor_eq","Description":"Alternative spelling of ^=","Id":"P0183"},{"Category":"keyword","Word":"final","Description":"Prevents further inheritance or overriding (C++11).","Id":"P0184"},{"Category":"keyword","Word":"override","Description":"Indicates that a function overrides a virtual function (C++11).","Id":"P0185"},{"Category":"keyword","Word":"transaction_safe","Description":"Indicates that a function can be called from whithin a transaction (Transactional Memory TS).","Id":"P0186"},{"Category":"keyword","Word":"transaction_safe_dynamic","Description":"Similar to transaction_safe but with dynamic checking.","Id":"P0187"},{"Category":"keyword","Word":"module","Description":"Declares a module (C++20).","Id":"P0188"},{"Category":"keyword","Word":"import","Description":"Imports a module (C++20).","Id":"P0189"},{"Category":"keyword","Word":"export","Description":"Makes declarations available to importers of a module (C++20).","Id":"P0190"}]